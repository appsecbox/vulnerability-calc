const severity = [
    {
        name: "None",
        bottom: 0.0,
        top: 0.0
    },
    {
        name: "Low",
        bottom: 0.1,
        top: 3.9
    },
    {
        name: "Medium",
        bottom: 4.0,
        top: 6.9
    },
    {
        name: "High",
        bottom: 7.0,
        top: 8.9
    },
    {
        name: "Critical",
        bottom: 9.0,
        top: 10.0
    }
];

class Calculation {

    static calcSeverity(_rank) {
        for (let sev of severity) {
            if (_rank >= sev.bottom && _rank <= sev.top) {
                return sev.name
            }
        }
        return "N/A"
    }

    static roundup(input) {
        let int_input = Math.round(input * 100000);
        if (int_input % 10000 === 0) {
            return int_input / 100000
        } else {
            return (Math.floor(int_input / 10000) + 1) / 10
        }
    };

    static fetchSelectedName(values, metricName) {
        let selectedOptions = []
        values.forEach((metric) => {
            if (metric.name === metricName) {
                metric.options.forEach((opt) => {
                    if (opt.selected) {
                        selectedOptions.push(opt.name)
                    }
                })
            }
        })
        if (selectedOptions.length > 0)
            return selectedOptions[0]
        return null
    }

    static fetchSelectedOptions(values, metricName, scopeChanged) {
        let selectedOptions = []
        values.forEach((metric) => {
            if (metric.name === metricName) {
                metric.options.forEach((opt) => {
                    if (opt.selected) {
                        if (scopeChanged) {
                            if ("weightScope" in opt) {
                                selectedOptions.push(opt.weightScope)
                            } else {
                                selectedOptions.push(opt.weight)
                            }
                        } else {
                            selectedOptions.push(opt.weight)
                        }
                    }
                })
            }
        })
        if (selectedOptions.length === 1 ){
            return selectedOptions[0]
        } else {
            let sum = 0.0
            selectedOptions.forEach( (d) => {
                sum += parseFloat( d )
            })
            console.log("SUM:" + parseFloat(sum) )
            return sum
        }
    }

    static fetchModifiedSelectedOptions(values, _modifiedMetricName, _metricName, scopeChanged) {
        return this.fetchSelectedName(values, _modifiedMetricName) === "NOT_DEFINED" ?
            this.fetchSelectedOptions(values, _metricName, scopeChanged) :
            this.fetchSelectedOptions(values, _modifiedMetricName, scopeChanged)
    }

    static calc(values) {
        let isScopeChanged = false
        values.forEach((metric) => {
            if (metric.name === "SCOPE") {
                metric.options.forEach((opt) => {
                    if (opt.name === "CHANGED" && opt.selected) {
                        isScopeChanged = true
                    }
                })
            }
        })

        let isModifiedScopeChanged = isScopeChanged
        if (this.fetchSelectedName(values, "MODIFIED_SCOPE") !== "NOT_DEFINED") {
            values.forEach((metric) => {
                if (metric.name === "MODIFIED_SCOPE") {
                    metric.options.forEach((opt) => {
                        if (opt.name === "CHANGED" && opt.selected) {
                            isModifiedScopeChanged = true
                        }
                    })
                }
            })
        }


        //BaseScore
        let impact, impactSubScore, exploitability, baseScore
        impactSubScore = 1 - (
            (1 - this.fetchSelectedOptions(values, "CONFIDENTIALITY", isScopeChanged)) *
            (1 - this.fetchSelectedOptions(values, "INTEGRITY", isScopeChanged)) *
            (1 - this.fetchSelectedOptions(values, "AVAILABILITY", isScopeChanged))
        );
        if (isScopeChanged) {
            impact = 7.52 * (impactSubScore - 0.029) - 3.25 * Math.pow(impactSubScore - 0.02, 15)
        } else {
            impact = 6.42 * impactSubScore
        }
        exploitability = 8.22 *
            this.fetchSelectedOptions(values, "ATTACK_VECTOR", isScopeChanged) *
            this.fetchSelectedOptions(values, "ATTACK_COMPLEXITY", isScopeChanged) *
            this.fetchSelectedOptions(values, "PRIVILEGES_REQUIRED", isScopeChanged) *
            this.fetchSelectedOptions(values, "USER_INTERACTION", isScopeChanged)
        if (impact <= 0) {
            baseScore = 0
        } else if (isScopeChanged) {
            baseScore = this.roundup(Math.min(1.08 * (impact + exploitability), 10))
        } else {
            baseScore = this.roundup(Math.min(impact + exploitability, 10))
        }


        //TemporalScore
        let temporalScore = this.roundup(baseScore *
            this.fetchSelectedOptions(values, "EXPLOIT_CODE_MATURITY", isScopeChanged) *
            this.fetchSelectedOptions(values, "REMEDIATION_LEVEL", isScopeChanged) *
            this.fetchSelectedOptions(values, "REPORT_CONFIDENCE", isScopeChanged)
        )


        //EnvironmentalScore
        let modifiedImpact, modifiedImpactSubScore, modifiedExploitability, environmentalScore

        let modifiedConfidentiality = this.fetchModifiedSelectedOptions(values, 'MODIFIED_CONFIDENTIALITY', 'CONFIDENTIALITY', isModifiedScopeChanged)
        let modifiedIntegrity = this.fetchModifiedSelectedOptions(values, 'MODIFIED_INTEGRITY', 'INTEGRITY', isModifiedScopeChanged)
        let modifiedAvailability = this.fetchModifiedSelectedOptions(values, 'MODIFIED_AVAILABILITY', 'AVAILABILITY', isModifiedScopeChanged)

        modifiedImpactSubScore = Math.min(
            1 - (
                (1 - this.fetchSelectedOptions(values, "CONFIDENTIALITY_REQUIREMENT", isModifiedScopeChanged) * modifiedConfidentiality) *
                (1 - this.fetchSelectedOptions(values, "INTEGRITY_REQUIREMENT", isModifiedScopeChanged) * modifiedIntegrity) *
                (1 - this.fetchSelectedOptions(values, "AVAILABILITY_REQUIREMENT", isModifiedScopeChanged) * modifiedAvailability)
            ),
            0.915
        )

        if (isModifiedScopeChanged) {
            modifiedImpact = 7.52 * (modifiedImpactSubScore - 0.029) - 3.25 * Math.pow((modifiedImpactSubScore * 0.9731 - 0.02), 13)
        } else {
            modifiedImpact = 6.42 * modifiedImpactSubScore
        }

        let modifiedAttackVector = this.fetchModifiedSelectedOptions(values, 'MODIFIED_ATTACK_VECTOR', 'ATTACK_VECTOR', isModifiedScopeChanged)
        let modifiedAttackComplexity = this.fetchModifiedSelectedOptions(values, 'MODIFIED_ATTACK_COMPLEXITY', 'ATTACK_COMPLEXITY', isModifiedScopeChanged)
        let modifiedPrivilegesRequired = this.fetchModifiedSelectedOptions(values, 'MODIFIED_PRIVILEGES_REQUIRED', 'PRIVILEGES_REQUIRED', isModifiedScopeChanged)
        let modifiedUserInteraction = this.fetchModifiedSelectedOptions(values, 'MODIFIED_USER_INTERACTION', 'USER_INTERACTION', isModifiedScopeChanged)

        modifiedExploitability = 8.22 *
            modifiedAttackVector *
            modifiedAttackComplexity *
            modifiedPrivilegesRequired *
            modifiedUserInteraction

        if (modifiedImpact <= 0) {
            environmentalScore = 0
        } else if (isModifiedScopeChanged) {
            environmentalScore = this.roundup(
                this.roundup(Math.min(1.08 * (modifiedImpact + modifiedExploitability), 10)) *
                this.fetchSelectedOptions(values, "EXPLOIT_CODE_MATURITY", isModifiedScopeChanged) *
                this.fetchSelectedOptions(values, "REMEDIATION_LEVEL", isModifiedScopeChanged) *
                this.fetchSelectedOptions(values, "REPORT_CONFIDENCE", isModifiedScopeChanged)
            )
        } else {
            environmentalScore = this.roundup(
                this.roundup(Math.min(modifiedImpact + modifiedExploitability, 10)) *
                this.fetchSelectedOptions(values, "EXPLOIT_CODE_MATURITY", isModifiedScopeChanged) *
                this.fetchSelectedOptions(values, "REMEDIATION_LEVEL", isModifiedScopeChanged) *
                this.fetchSelectedOptions(values, "REPORT_CONFIDENCE", isModifiedScopeChanged)
            )
        }


        //ExtendedScore
        let extendedScore, _score;
        if (environmentalScore) {
            _score = environmentalScore
        } else if (temporalScore) {
            _score = temporalScore
        } else {
            _score = baseScore
        }

        extendedScore = _score +
            _score * this.fetchSelectedOptions(values, "VICTIM_TYPE", isModifiedScopeChanged) +
            _score * this.fetchSelectedOptions(values, "VICTIM_AMOUNT", isModifiedScopeChanged) +
            _score * this.fetchSelectedOptions(values, "INTERNET_FACING", isModifiedScopeChanged)
        console.log("extendedScore"+extendedScore)

        let criticalProcessSubScore =
            this.fetchSelectedOptions(values, "AVAILABILITY", isModifiedScopeChanged) *
            this.fetchSelectedOptions(values, "CRITICAL_PROCESS", isModifiedScopeChanged)
        console.log("criticalProcessSubScore"+criticalProcessSubScore)

        let complianceSubScore = (
            this.fetchSelectedOptions(values, "CONFIDENTIALITY", isModifiedScopeChanged) +
            this.fetchSelectedOptions(values, "INTEGRITY", isModifiedScopeChanged)
        ) * this.fetchSelectedOptions(values, "COMPLIANCE", isModifiedScopeChanged)
        console.log("complianceSubScore"+complianceSubScore)

        let dataSubScore = (
            this.fetchSelectedOptions(values, "CONFIDENTIALITY", isModifiedScopeChanged) +
            this.fetchSelectedOptions(values, "INTEGRITY", isModifiedScopeChanged)
        ) * this.fetchSelectedOptions(values, "DATA", isModifiedScopeChanged)
        console.log("data"+dataSubScore)

        extendedScore += criticalProcessSubScore * _score +
            complianceSubScore * _score +
            dataSubScore * _score

        extendedScore = this.roundup(Math.min(extendedScore, 10));

        let vector = ''
        for(let c=0; c<values.length; c++){
            let ops = ''
            for( let x=0; x<values[c]["options"].length; x++){
                if( values[c]["options"][x]["selected"]===true){
                    ops += values[c]["options"][x]["label"]+"|"
                }
            }
            if(ops.length>1 &&
                ops!=="X|"
            ){
                ops = ops.substr(0, ops.length-1)
                vector += values[c]["label"]+":"+ops+"/"
            }
        }

        return {
            baseScore: baseScore,
            temporalScore: temporalScore,
            environmentalScore: environmentalScore,
            extendedScore: extendedScore,
            string: vector,
            severity: this.calcSeverity(extendedScore)
        }
    }
}

export default Calculation