import Metric from "./Metric";
import {Component} from "react";
import {Accordion, AccordionDetails, AccordionSummary, Card, Grid, makeStyles, Typography} from "@material-ui/core";
import Calculation from "./Calculation";
import {Alert, CardContent, CardHeader, TextField} from "@mui/material";
import SettingsApplicationsIcon from '@mui/icons-material/SettingsApplications';


const rootRed = {
    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',
    border: 0,
    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',
    color: 'white'
};
const rootOrange = {
    background: 'linear-gradient(45deg, #FEB06B 30%, #FF8E53 90%)',
    border: 0,
    boxShadow: '0 3px 5px 2px rgba(254, 176, 107, .3)',
    color: 'white'
};
const rootYellow = {
    background: 'linear-gradient(45deg, #FEF76B 30%, #FEB06B 90%)',
    border: 0,
    boxShadow: '0 3px 5px 2px rgba(254, 247, 107, .3)',
    color: 'white'
};
const rootGreen = {
    background: 'linear-gradient(45deg, #EEEEEE 30%, #FFFFFF 90%)',
    border: 0,
    boxShadow: '0 3px 5px 2px rgba(128, 128, 128, .3)',
    color: 'white'
};

class Calc extends Component {

    constructor(props) {
        super(props);
        this.state = {
            metrics: props.metrics,
            results: {
                baseScore: 0,
                temporalScore: 0,
                environmentalScore: 0,
                extendedScore: 0,
                string: ''
            }
        }
    }

    changeState(metricName, metricValue) {
        let currentState = this.state
        let newState = currentState.metrics.map((m) => {
            if (m.name === metricName) {
                let options = m.options.map((o) => {
                    if (o.name === metricValue) {
                        o.selected = !o.selected
                    } else if (!m.multiply) {
                        o.selected = false
                    }
                    return o
                })
                m.options = options
            }
            return m
        })

        this.setState({metrics: newState, results: Calculation.calc(newState)})
    }

    printSeverity(severity, score){
        let style=rootGreen
        if(severity==="Critical" || severity==="High"){
            style = rootRed
        } else if (severity==="Medium"){
            style = rootOrange
        } else if (severity==="Low"){
            style = rootYellow
        }

        return (
        <Card style={style}>
            <CardHeader title={severity}></CardHeader>
            <CardContent>
                <Typography variant={"h3"}>
                    {score}
                </Typography>
            </CardContent>
        </Card>
        )
    }


    render() {

        return (
            <div>
                {this.state.metrics.map((m) => {
                    if (m.type === "CVSSv3.1-BaseScore") {
                        return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                        metric={m}></Metric>)
                    } else {
                        return ''
                    }
                })}

                <br/>
                <Accordion>
                    <AccordionSummary>
                        <Typography><SettingsApplicationsIcon></SettingsApplicationsIcon> Детальная
                            оценка...</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                        <div>
                            {this.state.metrics.map((m) => {
                                if (m.type === "CVSSv3.1-EnvironmentalScore" ||
                                    m.type === "CVSSv3.1-TemporalScore") {
                                    return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                                    metric={m}></Metric>)
                                } else {
                                    return ''
                                }
                            })}
                        </div>
                    </AccordionDetails>
                </Accordion>
                <br/>

                {this.state.metrics.map((m) => {
                    if (m.type === "Extended") {
                        return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                        metric={m}></Metric>)
                    } else {
                        return ''
                    }
                })}

                <Grid container spacing={3}>
                    <Grid item xs={6}>
                        <Card>
                            <CardHeader title={"Scoring"}></CardHeader>
                            <CardContent>
                                <Typography>
                                    Base Score: {this.state.results.baseScore}<br/>
                                    Temporal Score: {this.state.results.temporalScore}<br/>
                                    Environmental Score: {this.state.results.environmentalScore}<br/>
                                </Typography>
                            </CardContent>
                        </Card>
                    </Grid>
                    <Grid item xs={6}>
                                    {this.printSeverity(this.state.results.severity, this.state.results.extendedScore)}<br/>
                    </Grid>
                    <Grid item xs={12}>
                        <Card>
                            <CardHeader title={"Vector"}></CardHeader>
                            <CardContent>
                                <TextField fullWidth value={this.state.results.string}></TextField>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            </div>
        )
    }
}

export default Calc