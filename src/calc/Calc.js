import Metric from "./Metric";
import {Component} from "react";
import {Accordion, AccordionDetails, AccordionSummary, Card, Typography} from "@material-ui/core";
import Calculation from "./Calculation";
import {CardContent} from "@mui/material";

class Calc extends Component {

    constructor(props) {
        super(props);
        this.state = {
            metrics: props.metrics,
            results:{
                baseScore:0,
                temporalScore:0,
                environmentalScore:0,
                extendedScore:0,
                string: ''
            }
        }
    }

    changeState(metricName, metricValue) {
        let currentState = this.state
        let newState = currentState.metrics.map((m) => {
            if (m.name === metricName) {
                let options = m.options.map((o) => {
                    if (o.name === metricValue) {
                        o.selected = !o.selected
                    } else if (!m.multiply) {
                        o.selected = false
                    }
                    return o
                })
                m.options = options
            }
            return m
        })

        this.setState({metrics: newState, results:Calculation.calc(newState) })
    }


    render() {

        return (
            <div>
                {this.state.metrics.map((m) => {
                    if (m.type === "CVSSv3.1-BaseScore") {
                        return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                        metric={m}></Metric>)
                    } else {
                        return ''
                    }
                })}

                <br/>
                <Accordion>
                    <AccordionSummary>
                        <Typography>Дополнительно...</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                        <div>
                            {this.state.metrics.map((m) => {
                                if (m.type === "CVSSv3.1-EnvironmentalScore" ||
                                    m.type === "CVSSv3.1-TemporalScore") {
                                    return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                                    metric={m}></Metric>)
                                } else {
                                    return ''
                                }
                            })}
                        </div>
                    </AccordionDetails>
                </Accordion>
                <br/>

                {this.state.metrics.map((m) => {
                    if (m.type === "Extended") {
                        return (<Metric onChangeCallback={(a, b) => this.changeState(a, b)} key={m.name}
                                        metric={m}></Metric>)
                    } else {
                        return ''
                    }
                })}

                <Card>
                    <CardContent>
                        Base Score: {this.state.results.baseScore}<br/>
                        Temporal Score: {this.state.results.temporalScore}<br/>
                        Environmental Score: {this.state.results.environmentalScore}<br/>
                        Extended Score: {this.state.results.extendedScore}<br/>
                        Severity: {this.state.results.severity}<br/>
                        Vector String: {this.state.results.string}<br/>
                    </CardContent>
                </Card>

            </div>
        )
    }
}

export default Calc